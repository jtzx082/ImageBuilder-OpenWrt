name: Optimized ImmortalWrt Build

concurrency: 
  group: build-${{ github.ref }}
  cancel-in-progress: true

on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      IMAGEBUILDER_URL: "https://downloads.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_ARCHIVE: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64.tar.zst"
      IMAGEBUILDER_DIR: "immortalwrt-imagebuilder-24.10.1-x86-64.Linux-x86_64"
      SOFTS_DIR: "softs"
      PLUGINS_FILE: "plugins.list"
      OUTPUT_DIR: "output"
      IMAGE_SIZE: "4096MB"
      ROOTFS_SIZE: "4096"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo xargs -a dependencies.txt apt install -y
        sudo timedatectl set-ntp on
        sudo apt install -y zstd pv  # 确保安装zstd和进度查看工具

    - name: Create URL hash for caching
      id: url-hash
      run: |
        HASH=$(echo -n "$IMAGEBUILDER_URL" | sha256sum | awk '{print $1}')
        echo "url_hash=$HASH" >> $GITHUB_OUTPUT

    # 关键修复1：优化缓存路径权限
    - name: Create cache directories
      run: |
        mkdir -p ${{ env.IMAGEBUILDER_DIR }}
        touch ${{ env.IMAGEBUILDER_ARCHIVE }}
        sudo chown -R $USER:$USER ${{ env.IMAGEBUILDER_DIR }}  # 确保用户所有权[2](@ref)[7](@ref)

    - name: Cache ImageBuilder
      uses: actions/cache@v4
      id: cache-imagebuilder
      with:
        path: |
          ${{ env.IMAGEBUILDER_ARCHIVE }}
          ${{ env.IMAGEBUILDER_DIR }}
        key: ${{ runner.os }}-imagebuilder-${{ steps.url-hash.outputs.url_hash }}
        restore-keys: |
          ${{ runner.os }}-imagebuilder-

    # 关键修复2：增强下载完整性和磁盘空间检查
    - name: Download and extract ImmortalWrt ImageBuilder
      if: steps.cache-imagebuilder.outputs.cache-hit != 'true'
      run: |
        # 检查磁盘空间
        FREE_SPACE=$(df -h . | awk 'NR==2 {print $4}')
        echo "可用磁盘空间: $FREE_SPACE"
        
        # 带重试机制的下载
        wget -q --show-progress --continue --tries=3 --waitretry=10 $IMAGEBUILDER_URL
        
        # 两步解压法避免权限问题
        zstd -d -c $IMAGEBUILDER_ARCHIVE | tar -xvf - --no-overwrite-dir
        
        # 验证解压完整性
        find $IMAGEBUILDER_DIR -type f | head -5 | xargs -I{} ls -lh {}  # 抽样检查[4](@ref)

    # 关键修复3：权限预修复
    - name: Fix directory permissions
      run: |
        sudo chown -R $USER:$USER ${{ env.IMAGEBUILDER_DIR }}
        find ${{ env.IMAGEBUILDER_DIR }} -type d -exec chmod 755 {} \;

    - name: Prepare custom IPK packages
      run: |
        mkdir -p $IMAGEBUILDER_DIR/packages/custom
        if [ -d "$SOFTS_DIR" ]; then
          find "$SOFTS_DIR" -type f -name "*.ipk" -exec cp -v {} "$IMAGEBUILDER_DIR/packages/custom/" \;
        fi
        sudo chown -R $USER:$USER $IMAGEBUILDER_DIR/packages/custom  # 确保权限一致

    - name: Parse plugins and packages
      id: get_pkgs
      run: |
        BASE_PKGS=""
        if [ -f "$PLUGINS_FILE" ]; then
          BASE_PKGS=$(grep -vE '^\s*#|^\s*$' "$PLUGINS_FILE" | parallel -j $(nproc) echo {} | tr '\n' ' ')
        fi

        CUSTOM_PKGS=""
        if [ -d "$IMAGEBUILDER_DIR/packages/custom" ]; then
          for ipk in "$IMAGEBUILDER_DIR/packages/custom/"*.ipk; do
            [ -e "$ipk" ] || continue
            pkgname=$(basename "$ipk" | awk -F_ '{print $1}')
            CUSTOM_PKGS="$CUSTOM_PKGS $pkgname"
          done
        fi

        ALL_PKGS=$(echo "$BASE_PKGS $CUSTOM_PKGS" | tr ' ' '\n' | sort -u | xargs)
        echo "FINAL_PKGS=$ALL_PKGS" >> $GITHUB_ENV

    # 关键修复4：避免sudo构建+磁盘空间监控
    - name: Build firmware with increased space
      run: |
        set -euxo pipefail
        cd $IMAGEBUILDER_DIR
        
        # 实时监控磁盘空间
        while true; do
          df -h .
          sleep 30
        done &
        DISK_MONITOR_PID=$!
        
        echo "CONFIG_TARGET_ROOTFS_PARTSIZE=$ROOTFS_SIZE" >> .config
        
        # 使用普通用户权限构建
        make -j $(($(nproc))) image \
          PACKAGES="$FINAL_PKGS" \
          FILES=../files \
          IMAGE_SIZE="$IMAGE_SIZE"
        
        kill $DISK_MONITOR_PID  # 结束磁盘监控
        
        mkdir -p ../$OUTPUT_DIR
        cp -Pv bin/targets/x86/64/* ../$OUTPUT_DIR/

    # 关键修复5：构建后清理
    - name: Clean build intermediates
      run: |
        cd $IMAGEBUILDER_DIR
        make clean  # 清理中间文件释放空间[9](@ref)
        sudo rm -rf build_dir/ staging_dir/ tmp/  # 删除大型目录
        df -h .  # 显示清理后空间

    - name: Verify firmware files
      run: |
        echo "==== Firmware files ===="
        ls -lh ${{ env.OUTPUT_DIR }}
        for file in ${{ env.OUTPUT_DIR }}/*; do
          if [[ $file == *.tar.gz ]]; then
            tar -tzf "$file" >/dev/null || echo "⚠️ Corrupted file: $file"
          fi
        done

    - name: Upload firmware to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt-x86-64
        path: ${{ env.OUTPUT_DIR }}

    - name: Generate release tag
      id: release_tag
      run: |
        echo "tag=auto-build-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_tag.outputs.tag }}
        name: "ImmortalWrt x86_64 Firmware ${{ steps.release_tag.outputs.tag }}"
        body: |
          Automated build includes:
          - Base packages: `${{ env.FINAL_PKGS }}`
          - Custom IPKs from softs directory
        files: ${{ env.OUTPUT_DIR }}/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 关键修复6：缓存前权限统一
    - name: Normalize permissions for caching
      if: always()
      run: |
        sudo chown -R $USER:$USER ${{ env.IMAGEBUILDER_DIR }}
        find ${{ env.IMAGEBUILDER_DIR }} -type f -exec chmod 644 {} \;
